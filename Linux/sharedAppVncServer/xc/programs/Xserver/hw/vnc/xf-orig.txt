
/*
 * rfbSendFramebufferUpdate - send the currently pending framebuffer update to
 * the RFB client.
 */

Bool
rfbSendFramebufferUpdate (pScreen, cl)
     ScreenPtr pScreen;
     rfbClientPtr cl;
{
  VNCSCREENPTR (pScreen);
  int i;
  int nUpdateRegionRects;
  rfbFramebufferUpdateMsg *fu = (rfbFramebufferUpdateMsg *) pVNC->updateBuf;
  RegionRec updateRegion, updateCopyRegion;
  int dx, dy;
  Bool sendCursorShape = FALSE;
  Bool sendCursorPos = FALSE;

  /*
   * If this client understands cursor shape updates, cursor should be
   * removed from the framebuffer. Otherwise, make sure it's put up.
   */

#ifdef SHAREDAPP
  if (pVNC->SharedApps->bEnabled)
  {
    return sharedapp_rfbSendUpdates(pScreen, cl);
  }
#endif

#if !XFREE86VNC
  if (cl->enableCursorShapeUpdates)
  {
    if (pVNC->cursorIsDrawn)
      rfbSpriteRemoveCursor (pScreen);
    if (!pVNC->cursorIsDrawn && cl->cursorWasChanged)
      sendCursorShape = TRUE;
  } else
  {
    if (!pVNC->cursorIsDrawn)
      rfbSpriteRestoreCursor (pScreen);
  }
#else
  if (cl->enableCursorShapeUpdates)
    if (cl->cursorWasChanged)
      sendCursorShape = TRUE;
#endif

  /*
   * Do we plan to send cursor position update?
   */

  if (cl->enableCursorPosUpdates && cl->cursorWasMoved)
    sendCursorPos = TRUE;

  /*
   * The modifiedRegion may overlap the destination copyRegion.  We remove
   * any overlapping bits from the copyRegion (since they'd only be
   * overwritten anyway).
   */

  REGION_SUBTRACT (pScreen, &cl->copyRegion, &cl->copyRegion,
                   &cl->modifiedRegion);

  /*
   * The client is interested in the region requestedRegion.  The region
   * which should be updated now is the intersection of requestedRegion
   * and the union of modifiedRegion and copyRegion.  If it's empty then
   * no update is needed.
   */

  REGION_NULL (pScreen, &updateRegion);
  REGION_UNION (pScreen, &updateRegion, &cl->copyRegion, &cl->modifiedRegion);
  REGION_INTERSECT (pScreen, &updateRegion, &cl->requestedRegion,
                    &updateRegion);

  if (!REGION_NOTEMPTY (pScreen, &updateRegion) &&
      !sendCursorShape && !sendCursorPos)
  {
    REGION_UNINIT (pScreen, &updateRegion);
    return TRUE;
  }

  /*
   * We assume that the client doesn't have any pixel data outside the
   * requestedRegion.  In other words, both the source and destination of a
   * copy must lie within requestedRegion.  So the region we can send as a
   * copy is the intersection of the copyRegion with both the requestedRegion
   * and the requestedRegion translated by the amount of the copy.  We set
   * updateCopyRegion to this.
   */

  REGION_NULL (pScreen, &updateCopyRegion);
  REGION_INTERSECT (pScreen, &updateCopyRegion, &cl->copyRegion,
                    &cl->requestedRegion);
  REGION_TRANSLATE (pScreen, &cl->requestedRegion, cl->copyDX, cl->copyDY);
  REGION_INTERSECT (pScreen, &updateCopyRegion, &updateCopyRegion,
                    &cl->requestedRegion);
  dx = cl->copyDX;
  dy = cl->copyDY;

  /*
   * Next we remove updateCopyRegion from updateRegion so that updateRegion
   * is the part of this update which is sent as ordinary pixel data (i.e not
   * a copy).
   */

  REGION_SUBTRACT (pScreen, &updateRegion, &updateRegion, &updateCopyRegion);

  /*
   * Finally we leave modifiedRegion to be the remainder (if any) of parts of
   * the screen which are modified but outside the requestedRegion.  We also
   * empty both the requestedRegion and the copyRegion - note that we never
   * carry over a copyRegion for a future update.
   */

  REGION_UNION (pScreen, &cl->modifiedRegion, &cl->modifiedRegion,
                &cl->copyRegion);
  REGION_SUBTRACT (pScreen, &cl->modifiedRegion, &cl->modifiedRegion,
                   &updateRegion);
  REGION_SUBTRACT (pScreen, &cl->modifiedRegion, &cl->modifiedRegion,
                   &updateCopyRegion);

  REGION_EMPTY (pScreen, &cl->requestedRegion);
  REGION_EMPTY (pScreen, &cl->copyRegion);
  cl->copyDX = 0;
  cl->copyDY = 0;

  /*
   * Now send the update.
   */

  cl->rfbFramebufferUpdateMessagesSent++;

  if (cl->preferredEncoding == rfbEncodingCoRRE)
  {
    nUpdateRegionRects = 0;

    for (i = 0; i < REGION_NUM_RECTS (&updateRegion); i++)
    {
      int x = REGION_RECTS (&updateRegion)[i].x1;
      int y = REGION_RECTS (&updateRegion)[i].y1;
      int w = REGION_RECTS (&updateRegion)[i].x2 - x;
      int h = REGION_RECTS (&updateRegion)[i].y2 - y;
      nUpdateRegionRects += (((w - 1) / cl->correMaxWidth + 1)
                             * ((h - 1) / cl->correMaxHeight + 1));
    }
  } else if (cl->preferredEncoding == rfbEncodingZlib)
  {
    nUpdateRegionRects = 0;

    for (i = 0; i < REGION_NUM_RECTS (&updateRegion); i++)
    {
      int x = REGION_RECTS (&updateRegion)[i].x1;
      int y = REGION_RECTS (&updateRegion)[i].y1;
      int w = REGION_RECTS (&updateRegion)[i].x2 - x;
      int h = REGION_RECTS (&updateRegion)[i].y2 - y;
      nUpdateRegionRects += (((h - 1) / (ZLIB_MAX_SIZE (w) / w)) + 1);
    }
  } else if (cl->preferredEncoding == rfbEncodingTight)
  {
    nUpdateRegionRects = 0;

    for (i = 0; i < REGION_NUM_RECTS (&updateRegion); i++)
    {
      int x = REGION_RECTS (&updateRegion)[i].x1;
      int y = REGION_RECTS (&updateRegion)[i].y1;
      int w = REGION_RECTS (&updateRegion)[i].x2 - x;
      int h = REGION_RECTS (&updateRegion)[i].y2 - y;
      int n = rfbNumCodedRectsTight (cl, x, y, w, h);
      if (n == 0)
      {
        nUpdateRegionRects = 0xFFFF;
        break;
      }
      nUpdateRegionRects += n;
    }
  } else
  {
    nUpdateRegionRects = REGION_NUM_RECTS (&updateRegion);
  }

  fu->type = rfbFramebufferUpdate;
  if (nUpdateRegionRects != 0xFFFF)
  {
    fu->nRects = Swap16IfLE (REGION_NUM_RECTS (&updateCopyRegion) +
                             nUpdateRegionRects +
                             !!sendCursorShape + !!sendCursorPos);
  } else
  {
    fu->nRects = 0xFFFF;
  }
  pVNC->ublen = sz_rfbFramebufferUpdateMsg;

  if (sendCursorShape)
  {
    cl->cursorWasChanged = FALSE;
    if (!rfbSendCursorShape (cl, pScreen))
      return FALSE;
  }

  if (sendCursorPos)
  {
    cl->cursorWasMoved = FALSE;
    if (!rfbSendCursorPos (cl, pScreen))
      return FALSE;
  }

  if (REGION_NOTEMPTY (pScreen, &updateCopyRegion))
  {
    if (!rfbSendCopyRegion (cl, &updateCopyRegion, dx, dy))
    {
      REGION_UNINIT (pScreen, &updateRegion);
      REGION_UNINIT (pScreen, &updateCopyRegion);
      return FALSE;
    }
  }

  REGION_UNINIT (pScreen, &updateCopyRegion);

  for (i = 0; i < REGION_NUM_RECTS (&updateRegion); i++)
  {
    int x = REGION_RECTS (&updateRegion)[i].x1;
    int y = REGION_RECTS (&updateRegion)[i].y1;
    int w = REGION_RECTS (&updateRegion)[i].x2 - x;
    int h = REGION_RECTS (&updateRegion)[i].y2 - y;

    cl->rfbRawBytesEquivalent += (sz_rfbFramebufferUpdateRectHeader
                                  + w * (cl->format.bitsPerPixel / 8) * h);

    switch (cl->preferredEncoding)
    {
    case rfbEncodingRaw:
      if (!rfbSendRectEncodingRaw (cl, x, y, w, h))
      {
        REGION_UNINIT (pScreen, &updateRegion);
        return FALSE;
      }
      break;
    case rfbEncodingRRE:
      if (!rfbSendRectEncodingRRE (cl, x, y, w, h))
      {
        REGION_UNINIT (pScreen, &updateRegion);
        return FALSE;
      }
      break;
    case rfbEncodingCoRRE:
      if (!rfbSendRectEncodingCoRRE (cl, x, y, w, h))
      {
        REGION_UNINIT (pScreen, &updateRegion);
        return FALSE;
      }
      break;
    case rfbEncodingHextile:
      if (!rfbSendRectEncodingHextile (cl, x, y, w, h))
      {
        REGION_UNINIT (pScreen, &updateRegion);
        return FALSE;
      }
      break;
    case rfbEncodingZlib:
      if (!rfbSendRectEncodingZlib (cl, x, y, w, h))
      {
        REGION_UNINIT (pScreen, &updateRegion);
        return FALSE;
      }
      break;
    case rfbEncodingTight:
      if (!rfbSendRectEncodingTight (cl, x, y, w, h))
      {
        REGION_UNINIT (pScreen, &updateRegion);
        return FALSE;
      }
      break;
    }
  }

  REGION_UNINIT (pScreen, &updateRegion);

  if (nUpdateRegionRects == 0xFFFF && !rfbSendLastRectMarker (cl))
    return FALSE;

  if (!rfbSendUpdateBuf (cl))
    return FALSE;

  return TRUE;
}
